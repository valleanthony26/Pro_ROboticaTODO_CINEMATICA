#!/usr/bin/env python2
import rospy
from sensor_msgs.msg import JointState
import numpy as np

from markers import *
from robot_functions import *

if __name__ == '__main__':

 rospy.init_node("testForwardKinematics")
 pub = rospy.Publisher('joint_states', JointState, queue_size=1)
 bmarker = BallMarker(color['GREEN'])
 marker = FrameMarker()
  
 # Joint names
 jnames = ['joint_1', 'joint_2', 'joint_3','joint_4', 'joint_5', 'joint_6','joint_7','joint_8']
 # Joint Configuration
 q  = np.array([0, 0, 0, 0,0.2, 0,0,0])

 T = fkine(q)
 print(np.round(T, 3))
 bmarker.position(T)
 
 x0 = TF2xyzquat(T)
 marker.setPose(x0)

 # Object (message) whose type is JointState
 jstate = JointState()
 # Set values to the message
 jstate.header.stamp = rospy.Time.now()
 jstate.name = jnames
 # Add the head joint value (with value 0) to the joints
 jstate.position = q
 # Loop rate (in Hz)
 rate = rospy.Rate(20)
 # Continuous execution loop
 while not rospy.is_shutdown():
  # Current time (needed for ROS)
  jstate.header.stamp = rospy.Time.now()
  # Publish the message
  pub.publish(jstate)
  #bmarker.publish()
  bmarker.publish()
  # Wait for the next iteration
  rate.sleep()

